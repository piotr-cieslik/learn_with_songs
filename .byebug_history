exit
d["relationships"]
d[:relationships]
d
exit
current_user().translations.find(params[:id]).destroy()
current_user().translations.find(params[:id])
current_user().translations.find(1)
current_user().translations
current_user().songs
current_user()
params[:id]
params
exit
parsedParams[:song_id].to_i
parsedParams[:song_id]
parsedParams.song_id
parsedParams
exit
n
translation_params
exit
exitr
ActiveModelSerializers::Deserialization.jsonapi_parse(params, only: ['foreign-meaning'])
params
translation_params
exit
params
translation_params
exit
params[:id]
params
exit
a = { id: "1", data: json_data[:data] }
a = { id: "1", data: json_data }
a = { id: "1", json_data }
json_data
exit
new_song_as_json
exit
a.methods()
@new_song.active_model_serializers
@new_song.active_model_serializer
@new_song
a.as_json()
a.methods()
a = SongSerializer.new(@new_song)
SongSerializer.new(@new_song)
SongSerializer.class
SongSerializer.class?
a = SongSerializer
@new_song.to_json()
@new_song
exit
server_response
exit
c
user_password
n
exit
exot
params
exit
get_response_body_as_json()[:data][:attributes]
get_response_body_as_json()[:data][:attributes]['auth-token'.to_sym()][A
get_response_body_as_json()[:data][:attributes]
get_response_body_as_json()['data'.to_sym]
get_response_body_as_json()['data'.to_s]
get_response_body_as_json()["data"]
get_response_body_as_json()[:data]
get_response_body_as_json()['data']
exit
n
exit
get_response_body_as_json()
c
user_email
user
n
c
params
c
params
c
params
c
xit
params[:session]
params
exit
song
exit
a.length()
a
exit
clock
n
e
n
exception
n
@song.valid?
n
@song.valid?
@song
c
exit
e
n
c
params[:id].to_i() == current_user.id
params[:id].to_i()
params[:id]
current_user.id
n
exit
params[:id]
current_user.id == params[:id]
current_user.id
curent_user.id
n
params[:id]
current_user
exit
@user.auth_token
n
@user.auth_token
user.auth_token
exit
user.valid?
user.valid
user
n
exit
exception
n
user
n
params
exit
expect(user_response).to have_key(:errors)
user_response
exit
user.errors
user.error
user.update(user_params)
user
user_params
c
user_params
c
user_params
c
exit
user
user.update(user_params)
user
c
user
user.valid?
user.update(user_params)
exit
user.update_without_password(user_params)
user.update(user_params)
user_params
exit
user_response
exit
n
c
exit
exception
n
@user
